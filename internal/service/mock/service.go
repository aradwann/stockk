// Code generated by MockGen. DO NOT EDIT.
// Source: stockk/internal/service (interfaces: IngredientService,OrderService)
//
// Generated by this command:
//
//	mockgen -package mockservice -destination internal/service/mock/service.go stockk/internal/service IngredientService,OrderService
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"
	models "stockk/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockIngredientService is a mock of IngredientService interface.
type MockIngredientService struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientServiceMockRecorder
	isgomock struct{}
}

// MockIngredientServiceMockRecorder is the mock recorder for MockIngredientService.
type MockIngredientServiceMockRecorder struct {
	mock *MockIngredientService
}

// NewMockIngredientService creates a new mock instance.
func NewMockIngredientService(ctrl *gomock.Controller) *MockIngredientService {
	mock := &MockIngredientService{ctrl: ctrl}
	mock.recorder = &MockIngredientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientService) EXPECT() *MockIngredientServiceMockRecorder {
	return m.recorder
}

// CheckIngredientLevelsAndAlert mocks base method.
func (m *MockIngredientService) CheckIngredientLevelsAndAlert(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIngredientLevelsAndAlert", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIngredientLevelsAndAlert indicates an expected call of CheckIngredientLevelsAndAlert.
func (mr *MockIngredientServiceMockRecorder) CheckIngredientLevelsAndAlert(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIngredientLevelsAndAlert", reflect.TypeOf((*MockIngredientService)(nil).CheckIngredientLevelsAndAlert), ctx)
}

// UpdateIngredientStock mocks base method.
func (m *MockIngredientService) UpdateIngredientStock(ctx context.Context, ingredients []models.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredientStock", ctx, ingredients)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIngredientStock indicates an expected call of UpdateIngredientStock.
func (mr *MockIngredientServiceMockRecorder) UpdateIngredientStock(ctx, ingredients any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredientStock", reflect.TypeOf((*MockIngredientService)(nil).UpdateIngredientStock), ctx, ingredients)
}

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
	isgomock struct{}
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(ctx context.Context, orderItems []models.OrderItem) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderItems)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(ctx, orderItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), ctx, orderItems)
}
